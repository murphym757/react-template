"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

/* eslint-disable no-undef, no-param-reassign, global-require, no-unused-vars, no-console, no-underscore-dangle, prefer-destructuring */
var async = require('async');

var path = require('path');

var fs = require('fs');

exports.command = 'ignore <glob> [globs..]';
exports.desc = 'Push to styleguideConfig.ignore the provided glob';

exports.builder = function (yargs) {
  return yargs.option('path', {
    alias: 'p',
    describe: 'path',
    default: process.cwd()
  });
};

exports.handler = function (argv) {
  switch (argv.path[0]) {
    case '/':
      break;

    default:
      argv.path = argv.path[1] === '/' ? path.join(process.cwd(), argv.path.slice(2)) : path.join(process.cwd(), argv.path);
      break;
  }

  var configPath = path.join(argv.path, 'styleguide/styleguide.ext.json');

  var config = require(configPath);

  async.map([].concat(argv.glob).concat(argv.globs), function (glob, cb) {
    cb(null, glob);
  }, function (err, results) {
    if (err) {
      console.error("[ERROR] ".concat(err.message));
      process.exit(1);
    }

    config.ignore = (0, _toConsumableArray2.default)(new Set(config.ignore.concat(Object.values(results))));
    fs.writeFileSync(configPath, JSON.stringify(config, null, 2), {
      encoding: 'utf8'
    });
  });
};