"use strict";

var _bootstrapStyled = require("bootstrap-styled");

var _utilities = require("../utilities");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

describe('bootstrap utilities', function () {
  it('should throw error if no theme passed', function () {
    expect(function () {
      return (0, _utilities.getUtilities)();
    }).toThrow(new Error('getUtilities expect theme and should be called at the end of your makeTheme.'));
  });
  it('should return all utilities', function () {
    var utilities = (0, _utilities.getUtilities)(_bootstrapStyled.theme);
    expect(_toConsumableArray(utilities).length).toBeGreaterThanOrEqual(68);
  });
  it('should merge with all utilities', function () {
    var utilities = (0, _utilities.getUtilities)(_bootstrapStyled.theme, new Map([['test', {
      property: 'test',
      class: 't',
      values: [0]
    }]]));
    expect(_toConsumableArray(utilities).length).toBeGreaterThanOrEqual(69);
  });
  it('should have required keys', function () {
    var utilities = (0, _utilities.getUtilities)(_bootstrapStyled.theme, new Map([['test', {
      property: 'test',
      class: 't',
      values: [0]
    }]])); // eslint-disable-next-line

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = utilities[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _step$value = _slicedToArray(_step.value, 2),
            key = _step$value[0],
            value = _step$value[1];

        expect(value.property).toBeDefined();
        expect(value.values).toBeDefined();
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });
});