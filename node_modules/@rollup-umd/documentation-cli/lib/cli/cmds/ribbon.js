"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

/* eslint-disable no-undef, no-param-reassign, global-require, no-unused-vars, no-console, no-underscore-dangle, prefer-destructuring */
var path = require('path');

var fs = require('fs');

exports.command = 'ribbon';
exports.desc = 'Update to ribbon according to the repository value in package.json';

exports.builder = function (yargs) {
  return yargs.option('path', {
    alias: 'p',
    describe: 'path',
    default: process.cwd()
  });
};

exports.handler =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(argv) {
    var _require, url, cfgPath, cfg, repoName, ribbon;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.t0 = argv.path[0];
            _context.next = _context.t0 === '/' ? 3 : 4;
            break;

          case 3:
            return _context.abrupt("break", 6);

          case 4:
            argv.path = argv.path[1] === '/' ? path.join(process.cwd(), argv.path.slice(2)) : path.join(process.cwd(), argv.path);
            return _context.abrupt("break", 6);

          case 6:
            _require = require(path.join(argv.path, 'package.json')), url = _require.repository.url;
            cfgPath = path.join(argv.path, 'styleguide/styleguide.ext.json');
            cfg = require(cfgPath);
            repoName = url.indexOf('github.com') !== -1 ? 'GitHub' : 'GitLab';
            ribbon = {
              url: url.replace(/\.git$/, ''),
              text: "Fork us on ".concat(repoName)
            };
            fs.writeFileSync(cfgPath, JSON.stringify((0, _objectSpread2.default)({}, cfg, {
              ribbon: ribbon
            }), null, 2), 'utf8');
            console.log("[Success] Ribbon is: ".concat(ribbon.text, ": ").concat(ribbon.url));

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();