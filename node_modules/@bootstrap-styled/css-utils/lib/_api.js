"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.screenUtilities = screenUtilities;
exports.printUtilities = printUtilities;

var _breakpoints = require("@bootstrap-styled/css-mixins/lib/breakpoints");

var _utilities = require("@bootstrap-styled/css-mixins/lib/utilities");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * @param {object} gridBreakpoints - grid breakpoints
 * @param {Map} utilities - map of utilities
 * @returns {string} - css screen utilities
 */
function screenUtilities(gridBreakpoints, utilities) {
  return Object.keys(gridBreakpoints).map(function (bp) {
    var infix = (0, _breakpoints.breakpointInfix)(bp, gridBreakpoints);
    var utilityList = []; // eslint-disable-next-line no-unused-vars, no-restricted-syntax

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = utilities[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _step$value = _slicedToArray(_step.value, 2),
            key = _step$value[0],
            utility = _step$value[1];

        if (utility && (utility.responsive || infix === '')) {
          utilityList.push((0, _utilities.generateUtility)(utility, infix));
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return (0, _breakpoints.mediaBreakpointUp)(bp, gridBreakpoints, utilityList.join('\n'));
  }).join('\n');
}

function printUtilities(gridBreakpoints, utilities) {
  var utilityList = []; // eslint-disable-next-line no-unused-vars, no-restricted-syntax

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = utilities[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _step2$value = _slicedToArray(_step2.value, 2),
          key = _step2$value[0],
          utility = _step2$value[1];

      if (utility && utility.print === true) {
        utilityList.push((0, _utilities.generateUtility)(utility, '-print'));
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return "@media print {\n    ".concat(utilityList.join('\n'), "\n  }");
}